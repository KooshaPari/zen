version: '3.8'

services:
  # PostgreSQL Database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: zen-postgres
    environment:
      POSTGRES_DB: zen_mcp
      POSTGRES_USER: zen_user
      POSTGRES_PASSWORD: zen_password
      POSTGRES_EXTENSIONS: pgvector
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U zen_user -d zen_mcp"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - zen-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: zen-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - zen-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: zen-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MGMT_PORT:-15672}:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - zen-network

  # Text Embedding Inference (TEI) for semantic search
  embedding-service:
    image: ghcr.io/huggingface/text-embeddings-inference:cpu-1.5
    container_name: zen-embeddings
    environment:
      MODEL_ID: BAAI/bge-small-en-v1.5
      MAX_BATCH_REQUESTS: 64
      MAX_CLIENT_BATCH_SIZE: 32
    ports:
      - "8090:80"
    volumes:
      - embedding_models:/data
    command: --model-id BAAI/bge-small-en-v1.5 --port 80
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - zen-network

  # NATS for messaging (optional)
  nats:
    image: nats:2.10-alpine
    container_name: zen-nats
    ports:
      - "4222:4222"  # Client connections
      - "8222:8222"  # HTTP monitoring
      - "6222:6222"  # Cluster routing
    volumes:
      - nats_data:/data
      - ./config/nats.conf:/etc/nats/nats.conf
    command: ["-c", "/etc/nats/nats.conf", "--store_dir", "/data"]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - zen-network

  # Kafka for event streaming (optional)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zen-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - zen-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: zen-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:29092"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - zen-network

  # Ollama for local model inference (optional)
  ollama:
    image: ollama/ollama:latest
    container_name: zen-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_models:/root/.ollama
    environment:
      OLLAMA_HOST: 0.0.0.0
    networks:
      - zen-network
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G

  # Grafana for monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: zen-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - zen-network
    depends_on:
      - postgres
      - redis

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: zen-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - zen-network

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: zen-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@zen.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - zen-network
    depends_on:
      - postgres

networks:
  zen-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  embedding_models:
  nats_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  ollama_models:
  grafana_data:
  prometheus_data:
  pgadmin_data:
